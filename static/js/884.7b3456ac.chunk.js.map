{"version":3,"file":"static/js/884.7b3456ac.chunk.js","mappings":"sMA2CA,UAvCqB,WAAO,IAAD,MACvB,GAA0BA,EAAAA,EAAAA,UAAS,CAAC,GAApC,eAAOC,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACDE,GAAWC,EAAAA,EAAAA,OAElBC,EAAAA,EAAAA,YAAU,WACDJ,IAELK,EAAAA,EAAAA,IAAgBL,GAASM,MAAK,SAAAC,GAAQ,OAAIR,EAASQ,EAAb,GACzC,GAAE,CAACP,IAEJ,IAAMQ,EAAQ,oBAAGN,EAASO,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,UAEzC,OACI,4BACI,SAAC,KAAD,CAAMC,GAAIH,EAAV,sBAGA,gBAAKI,IAAG,yCAAoCd,EAAMe,aAAeC,IAAKhB,EAAMiB,SAC5E,0BAAKjB,EAAMiB,MAAX,KAAoBC,SAASlB,EAAMmB,cAAnC,QACA,yCAAiBC,KAAKC,MAA2B,GAArBrB,EAAMsB,cAAlC,QACA,sCACA,uBAAItB,EAAMuB,YACV,oCACA,iCAAIvB,EAAMwB,cAAV,aAAI,EAAcC,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,QAEhD,uDACA,2BACI,yBACI,SAAC,KAAD,CAAMf,GAAG,OAAOF,MAAO,CAAEC,KAAMF,GAA/B,qBAEJ,yBACI,SAAC,KAAD,CAAMG,GAAG,UAAUF,MAAO,CAAEC,KAAMF,GAAlC,2BAGR,SAAC,KAAD,MAGX,C,sLCxCKmB,E,OAAWC,EAAAA,OAAe,CAC5BC,QAAS,+BACTC,OAAQ,CACJC,QAAS,sCAIJC,EAAiB,mCAAG,+GAENL,EAAQM,IAAI,uBAFN,uBAErBC,EAFqB,EAErBA,KAFqB,kBAGtBA,EAAKC,SAHiB,yDAMtB,KAAMC,SANgB,yDAAH,qDAWjBC,EAAY,mCAAG,WAAMC,GAAN,kGAEDX,EAAQM,IAAI,gBAAiB,CAClDH,OAAQ,CAACS,SAAU,QAASC,KAAM,EAAGC,eAAe,EAAOH,MAAAA,KAHrC,uBAEhBJ,EAFgB,EAEhBA,KAFgB,kBAKjBA,GALiB,yDAQjB,KAAME,SARW,yDAAH,sDAYZ/B,EAAe,mCAAG,WAAMqC,GAAN,kGAEJf,EAAQM,IAAR,iBAAsBS,GAAY,CACvDZ,OAAQ,CAACS,SAAU,WAHM,uBAEnBL,EAFmB,EAEnBA,KAFmB,kBAKpBA,GALoB,yDAQpB,KAAME,SARc,yDAAH,sDAYfO,EAAe,mCAAG,WAAMD,GAAN,kGAEJf,EAAQM,IAAR,gBAAqBS,EAArB,YAAyC,CAC9DZ,OAAQ,CAAES,SAAU,WAHK,uBAEnBL,EAFmB,EAEnBA,KAFmB,kBAKpBA,EAAKU,MALe,yDAQpB,KAAMR,SARc,yDAAH,sDAYfS,EAAe,mCAAG,WAAMH,GAAN,kGAEJf,EAAQM,IAAR,gBAAqBS,EAArB,YAAyC,CAC9DZ,OAAQ,CAAES,SAAU,WAHK,uBAEnBL,EAFmB,EAEnBA,KAFmB,kBAKpBA,EAAKC,SALe,yDAQpB,KAAMC,SARc,yDAAH,qD","sources":["pages/MovieDetails.jsx","services/fetchMovies.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { getMovieDetails } from \"../services/fetchMovies\";\nimport { Link, Outlet, useParams, useLocation } from \"react-router-dom\";\n\nconst MovieDetails = () => {\n    const [movie, setMovie] = useState({});\n    const { movieId } = useParams();\n     const location = useLocation();\n\n    useEffect(() => {\n        if (!movieId) return;\n\n        getMovieDetails(movieId).then(response => setMovie(response));\n    }, [movieId]);\n\n    const backLink = location.state?.from ?? '/movies';\n   \n    return (\n        <div>\n            <Link to={backLink}>\n                 Go back\n            </Link>\n            <img src={`https://image.tmdb.org/t/p/w500${movie.poster_path}`} alt={movie.title} />\n            <h1>{movie.title} ({parseInt(movie.release_date)})</h1>\n            <p>User score:  {Math.round(movie.vote_average * 10)}%</p>\n            <h2>Overview</h2>\n            <p>{movie.overview}</p>\n            <h2>Genres</h2>\n            <p>{movie.genres?.map(genre => genre.name).join(' ')}</p>   \n            \n            <h2>Additional in information</h2>\n            <ul>\n                <li>\n                    <Link to=\"cast\" state={{ from: backLink }}>Cast</Link>\n                </li>\n                <li>\n                    <Link to=\"reviews\" state={{ from: backLink }}>Reviews</Link>\n                </li>\n            </ul>\n            <Outlet />\n        </div>\n    )\n}\nexport default MovieDetails;","import axios from 'axios';\n\nconst request =  axios.create ( { \n    baseURL: 'https://api.themoviedb.org/3', \n    params: {\n        api_key: '3f49b3b9ed9e869041581873eb04aafc',\n    },\n} ) ;\n\nexport const getTrendingMovies = async () => {\n  try {\n    const { data } = await request.get('/trending/movie/day');\n    return data.results;\n   \n  } catch (error) {\n    return error.message;\n  }\n}\n\n\nexport const searchMovies = async query => {\n  try {\n    const { data } = await request.get('/search/movie', {\n      params: {language: 'en-US', page: 1, include_adult: false, query}\n    });\n    return data;\n   \n  } catch (error) {\n    return error.message;\n  }\n}\n\nexport const getMovieDetails = async movie_id => {\n  try {\n    const { data } = await request.get(`/movie/${movie_id}`, {\n      params: {language: 'en-US' },\n    });\n    return data;\n   \n  } catch (error) {\n    return error.message;\n  }\n}\n\nexport const getMovieCredits = async movie_id => {\n  try {\n    const { data } = await request.get(`movie/${movie_id}/credits`, {\n      params: { language: 'en-US'}\n    });\n    return data.cast;\n   \n  } catch (error) {\n    return error.message;\n  }\n}\n\nexport const getMovieReviews = async movie_id => {\n  try {\n    const { data } = await request.get(`movie/${movie_id}/reviews`, {\n      params: { language: 'en-US'}\n    });\n    return data.results;\n   \n  } catch (error) {\n    return error.message;\n  }\n}\n\n\n\n\n\n\n"],"names":["useState","movie","setMovie","movieId","useParams","location","useLocation","useEffect","getMovieDetails","then","response","backLink","state","from","to","src","poster_path","alt","title","parseInt","release_date","Math","round","vote_average","overview","genres","map","genre","name","join","request","axios","baseURL","params","api_key","getTrendingMovies","get","data","results","message","searchMovies","query","language","page","include_adult","movie_id","getMovieCredits","cast","getMovieReviews"],"sourceRoot":""}