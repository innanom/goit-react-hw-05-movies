{"version":3,"file":"static/js/747.0e893a57.chunk.js","mappings":"oKAkBA,IAf2B,SAAC,GAAe,IAAbA,EAAY,EAAZA,MACpBC,GAAWC,EAAAA,EAAAA,MACjB,OACI,wBACKF,EAAMG,KAAI,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,GAAV,OACP,yBACI,SAAC,KAAD,CAAMC,GAAE,kBAAaD,GAAME,MAAO,CAAEC,KAAMP,GAA1C,SACKG,KAFAC,EADF,KAStB,C,0GCsBD,EAjCyB,SAAC,GAAiB,IAAhBI,EAAe,EAAfA,SAEzB,GAAwCC,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAiBE,OACI,kBAAMH,SAZS,SAAAI,GACnBA,EAAMC,iBAEwB,KAAxBH,EAAaI,SAKnBN,EAASE,GACTC,EAAgB,IACjB,EAEK,WACI,kBACEI,KAAK,OACLC,MAAON,EACPO,SApBS,SAAAL,GACnBD,EAAgBC,EAAMM,cAAcF,MAAMG,cAC3C,KAoBS,mBAAQJ,KAAK,SAAb,sBAKX,E,kBCRD,EAtBe,WAAO,IAAD,EACjB,GAAoCN,EAAAA,EAAAA,UAAS,IAA7C,eAAOW,EAAP,KAAmBC,EAAnB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAQ,UAAGF,EAAaG,IAAI,gBAApB,QAAgC,IAE9CC,EAAAA,EAAAA,YAAU,WACCF,IACPf,EAAAA,EAAAA,IAAae,GAAUG,MAAK,SAAAC,GAAG,OAAIR,EAAcQ,EAAIC,QAAtB,GAClC,GAAE,CAACL,EAAUD,IAMd,OACI,4BACI,SAAC,EAAD,CAAkBhB,SANJ,SAAAuB,GAClBP,EAAgB,CAAEQ,MAAOD,GAC5B,IAKQX,IAAc,SAACa,EAAA,EAAD,CAAYlC,MAAOqB,MAG7C,C,sLCxBKc,E,OAAWC,EAAAA,OAAe,CAC5BC,QAAS,+BACTC,OAAQ,CACJC,QAAS,sCAIJC,EAAiB,mCAAG,+GAENL,EAAQR,IAAI,uBAFN,uBAErBc,EAFqB,EAErBA,KAFqB,kBAGtBA,EAAKV,SAHiB,yDAMtB,KAAMW,SANgB,yDAAH,qDAWjB/B,EAAY,mCAAG,WAAMsB,GAAN,kGAEDE,EAAQR,IAAI,gBAAiB,CAClDW,OAAQ,CAACK,SAAU,QAASC,KAAM,EAAGC,eAAe,EAAOZ,MAAAA,KAHrC,uBAEhBQ,EAFgB,EAEhBA,KAFgB,kBAKjBA,GALiB,yDAQjB,KAAMC,SARW,yDAAH,sDAYZI,EAAe,mCAAG,WAAMC,GAAN,kGAEJZ,EAAQR,IAAR,iBAAsBoB,GAAY,CACvDT,OAAQ,CAACK,SAAU,WAHM,uBAEnBF,EAFmB,EAEnBA,KAFmB,kBAKpBA,GALoB,yDAQpB,KAAMC,SARc,yDAAH,sDAYfM,EAAe,mCAAG,WAAMD,GAAN,kGAEJZ,EAAQR,IAAR,gBAAqBoB,EAArB,YAAyC,CAC9DT,OAAQ,CAAEK,SAAU,WAHK,uBAEnBF,EAFmB,EAEnBA,KAFmB,kBAKpBA,EAAKQ,MALe,yDAQpB,KAAMP,SARc,yDAAH,sDAYfQ,EAAe,mCAAG,WAAMH,GAAN,kGAEJZ,EAAQR,IAAR,gBAAqBoB,EAArB,YAAyC,CAC9DT,OAAQ,CAAEK,SAAU,WAHK,uBAEnBF,EAFmB,EAEnBA,KAFmB,kBAKpBA,EAAKV,SALe,yDAQpB,KAAMW,SARc,yDAAH,qD","sources":["components/MoviesList/MoviesList.jsx","components/SearchMoviesForm/SearchMoviesForm.jsx","pages/Movies.jsx","services/fetchMovies.jsx"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst ListTrendingMovies = ({ array }) => {\n    const location = useLocation();\n    return (\n        <ul>\n            {array.map(({ title, id }) => (\n                <li key={id}>\n                    <Link to={`/movies/${id}`} state={{ from: location }}>\n                        {title}\n                    </Link>\n                </li>\n            ))}\n        </ul>\n     );\n};\n\nexport default ListTrendingMovies;\n\nListTrendingMovies.propTypes = {\n    array: PropTypes.arrayOf(\n        PropTypes.exact({\n            title: PropTypes.string.isRequired,\n            id: PropTypes.number.isRequired,\n        }))\n}","import { useState } from 'react';\n// import { toast } from 'react-toastify';\n// import 'react-toastify/dist/ReactToastify.css';\nimport PropTypes from 'prop-types';\n\nconst SearchMoviesForm = ({onSubmit}) =>  {\n\n  const [searchMovies, setSearchMovies] = useState('');\n  \n  const handleChange = event => {\n    setSearchMovies(event.currentTarget.value.toLowerCase());\n  }\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n      if (searchMovies.trim() === '') {\n        // toast.error(\"Enter data to search\")\n          return\n      }\n\n    onSubmit(searchMovies);\n    setSearchMovies('');\n  }\n    return (\n        <form onSubmit={handleSubmit}>\n            <input\n              type=\"text\"\n              value={searchMovies}\n              onChange={handleChange}\n            />\n            <button type=\"submit\">\n            Search\n            </button>\n        </form>\n    )\n}\n\nexport default SearchMoviesForm;\n\nSearchMoviesForm.propTypes = {\n    onSubmit: PropTypes.func,\n       \n}","import { useEffect, useState } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\nimport SearchMoviesForm from \"../components/SearchMoviesForm/SearchMoviesForm\"\nimport { searchMovies } from \"../services/fetchMovies\"\nimport MoviesList from \"../components/MoviesList/MoviesList\";\n\nconst Movies = () => {\n    const [movieFound, setMovieFound] = useState([]);\n    const [searchParams, setSearchParams] = useSearchParams();\n    const newMovie = searchParams.get(\"query\") ?? \"\";\n\n    useEffect(() => {\n          if (!newMovie) return;\n        searchMovies(newMovie).then(res => setMovieFound(res.results));\n    }, [newMovie, setSearchParams]);\n\n     const handleSubmit = newQuery => {\n        setSearchParams({ query: newQuery });\n    };\n\n    return (\n        <div>\n            <SearchMoviesForm onSubmit={handleSubmit} />\n            {movieFound && <MoviesList array={movieFound}/>}\n        </div>\n    )\n};\n\nexport default Movies;\n\n","import axios from 'axios';\n\nconst request =  axios.create ( { \n    baseURL: 'https://api.themoviedb.org/3', \n    params: {\n        api_key: '3f49b3b9ed9e869041581873eb04aafc',\n    },\n} ) ;\n\nexport const getTrendingMovies = async () => {\n  try {\n    const { data } = await request.get('/trending/movie/day');\n    return data.results;\n   \n  } catch (error) {\n    return error.message;\n  }\n}\n\n\nexport const searchMovies = async query => {\n  try {\n    const { data } = await request.get('/search/movie', {\n      params: {language: 'en-US', page: 1, include_adult: false, query}\n    });\n    return data;\n   \n  } catch (error) {\n    return error.message;\n  }\n}\n\nexport const getMovieDetails = async movie_id => {\n  try {\n    const { data } = await request.get(`/movie/${movie_id}`, {\n      params: {language: 'en-US' },\n    });\n    return data;\n   \n  } catch (error) {\n    return error.message;\n  }\n}\n\nexport const getMovieCredits = async movie_id => {\n  try {\n    const { data } = await request.get(`movie/${movie_id}/credits`, {\n      params: { language: 'en-US'}\n    });\n    return data.cast;\n   \n  } catch (error) {\n    return error.message;\n  }\n}\n\nexport const getMovieReviews = async movie_id => {\n  try {\n    const { data } = await request.get(`movie/${movie_id}/reviews`, {\n      params: { language: 'en-US'}\n    });\n    return data.results;\n   \n  } catch (error) {\n    return error.message;\n  }\n}\n\n\n\n\n\n\n"],"names":["array","location","useLocation","map","title","id","to","state","from","onSubmit","useState","searchMovies","setSearchMovies","event","preventDefault","trim","type","value","onChange","currentTarget","toLowerCase","movieFound","setMovieFound","useSearchParams","searchParams","setSearchParams","newMovie","get","useEffect","then","res","results","newQuery","query","MoviesList","request","axios","baseURL","params","api_key","getTrendingMovies","data","message","language","page","include_adult","getMovieDetails","movie_id","getMovieCredits","cast","getMovieReviews"],"sourceRoot":""}